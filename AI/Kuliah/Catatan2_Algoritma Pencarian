BFS (Breadth First Search) dan DFS (Depth First Search)
    Algoritma pencarian untuk mencari kemungkinan penyelesaian

    Mendefinisikan permasalahan terdiri atas :
        Mendefinisikan suatu state 
        Menerapkan satu/lebih start state  
        Menerapkan satu/lebih goal state 
        Menetapkan rules
    
    A unifying view (Newell and Simon)
        Ruang masalah terdiri dari : 
            1. State space = himpunan state dari suatu masalah (semua kemungkinan state yg terjadi)
            2. Operator = berpindah dri 1 state ke state lain
            3. Ruang masalah digambarkan dengan graph 
            4. Himpunan state dinyatakan dengan node 
            5. Link (arcs) menyatakan operator
    
    Cth masalah
        Seorang petani (F), harus menyebrang bersama dengan Serigala (W), Bebek (D), dan Jagung (C). F bisa menyebrang sendiri maupun menyebrang bersama hewan lain
        Mereka harus smpe di tmpt tujuan dengan selamat dan W tidak bisa ditinggal bersama dengan D, dan D tidak bisa ditinggal bersama dengan C
        Maka solusinya
            1. F menyebrang dengan D
            2. F kembali sendiri
            3. F menyebrang dengan W
            4. F kembali dengan D
            5. F menyebrang dengan C
            6. F kembali sendiri
            7. F menyebrang dengan D
        
        Ada 8 puzzle problem
            1   4   3       1   4   3
            7       6 --->  7   6   2
            5   8   2       5   8   
            State = posisi board yg legal
            Operator = up,left,right,down
            Initial State = posisi board awal
            Goal State = tujuan posisi board 
        
        Ada Traveling Salesperson Problem (Salesman pergi dri satu kota ke kota lain)
            cari jarak terpendek untuk mengunjungi semua kota
            Ada yg namanya nearest neighbor path = mengambil rute terpendek dari suatu state tanpa memikirkan jalan panjangnya 
            Ada yg namanya Minimal cost path = mengambil total rute terpendek (jadi, terkadang mengambil state yg lebih jauh, tetapi costnya tetap paling rendah) (Ini yg dicari)
    
    Algoritma BFS mengimplementasikan queue dan menerapkan konsep FIFO (First In, First Out)
        BFS memiliki 2 kondisi, open dan closed
            open adalah pencarian, closed adalah kondisi node ditampilkan di layar
        dimana, BFS mencari secara melebar(jadi semuanya dicari)
                    A
            B   C       D   
        E   F   G       H
        maka, open = [A], closed = []
              open = [B,C,D], closed =  [A]
              open = [C,D,E,F], closed = [B,A]
              open = [D,E,F,G,H], closed = [C,B,A]
              open = [E,F,G,H], closed = [D,C,B,A] (sampai semua node dikunjungi)
              open = [F,G,H], closed = [E,D,C,B,A]....

    Algoritma DFS mengimplementasikan stack dan menerapkan konsep LIFO (Last In, First Out)
        DFS juga memiliki 2 kondisi, open dan closed
        dimana DFS mencari secara mendalam (jadi 1 rute diperdalam sampai ujung, setelah selesai.. kembali state awal)
                    A
            B   C       D   
        E   F   G       H
        maka, open = [A], closed = []
              open = [B,C,D], closed = [A]
              open = [E,F,C,D], closed = [B,A]
              open = [F,C,D,G], closed = [E,B,A]
              open = [C,D,G,H], closed = [F,E,B,A] (sampai semua node dikunjungi)
    
    Pencarian Blind/Sederhana
        BFS dan DFS disebut "Blind search" = metode ini tidak memiliki knowledge mengenai masalah dan ruang permasalahan
        BFS dan DFS dapat dikatakan brute-force search (pencarian memaksa), uninformed search, atau weak method
        Metode ini tidak dapat berharap banyak, tpi dapat memberikan worst case scenario, dasar dari algoritma
    
    Strategi Pencarian (search strategy)
        Strategi pencarian didefinisikan dengan memilih urutan perluasan node
        Strategi dievaluasi melalui: 
            1. Completeness = apakah selalu menemukan solusi jika solusi itu ada
            2. Time complexity = jumlah node yg dihasilkan dan node yg diperlukan agar mencapai goal
            3. Space complexity = jumlah max node di memori
            4. Optimality = apakah ada cara untuk cost terendah

            Time and Space complexity diukur dri 
            1. b = faktor percabangan max dri search tree
            2. d = depth solusi
            3. m = depth max dri search tree
    
    Kelebihan BFS 
        1. Tidak akan ada jalan buntu
        2. Jika ada salah satu solusi, maka BFS akan menemukannya
            Jika ada lebih dri satu solusi, maka solusi minimum yg diambil
    Kekurangan BFS
        1. Membutuhkan memori yg banyak, karena menyimpan semua node dalam 1 pohon
        2. Membutuhkan waktu yg lama, karena akan menguji n level untuk mendapat solusi pada level n+1
    
    Kelebihan DFS
        1. Membutuhkan memori sedikit, karena hanya menyimpan node dalam lintasan
        2. DFS dapat menemukan goal tanpa harus menguji semuanya
    Kekurangan DFS
        1. Kemungkinan tidak ditemukan goal yg diharapkan
        2. Hanya akan mendapat satu solusi tiap pencarian